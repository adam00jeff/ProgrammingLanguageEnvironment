<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProgrammingLanguageEnvironment</name>
    </assembly>
    <members>
        <member name="T:ProgrammingLanguageEnvironment.Action">
            <summary>
            Sets up a list of actions that can be performed by the program
            Actions are exectuted in the Execute class
            </summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Circle">
            <summary>The action for drawing circles</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Square">
            <summary>The action for drawing squares</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Rectangle">
            <summary>The action for drawing rectangles</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Rect">
            <summary>The action for drawing rectangles</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Triangle">
            <summary>The action for drawing triangles</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Line">
            <summary>The action for drawing lines</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Moveto">
            <summary>The action for moving the drawing position</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Drawto">
            <summary>The action for drawing a line from the drawing position to another</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Clear">
            <summary>The action for clearing the bitmap and the program</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Reset">
            <summary>The action for resetting the drawing position to default values (0,0)</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Colourred">
            <summary>The action for selecting the colour red</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Colourredgreen">
            <summary>The action for selecting the colour flashing between red and green</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Colourgreen">
            <summary>The action for selecting the colour green</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Colourblue">
            <summary>The action for selecting the colour blue</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Colourreset">
            <summary>The action for selecting the default colour black</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Fillon">
            <summary>The action for selecting the drawn shapes to be filled</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Filloff">
            <summary>The action for selecting the drawn shapes to be unfilled</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.While">
            <summary>The action for selecting a while loop</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Loop">
            <summary>The action for selecting a regular loop</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Endloop">
            <summary>The action for ending a loop</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.If">
            <summary>The action for selecting an IF statement</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Endif">
            <summary>The action for ending an IF statement</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.Var">
            <summary>The action for setting a variable</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Action.None">
            <summary>The action placeholder for an action not being set</summary>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Circle">
            <summary>
            Class to draw Circles
            </summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Circle.radius">
            <summary>The radius
            value</summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Circle.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Circle.#ctor(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructor for circles
            </summary>
            <param name="colour">the colour of the circle</param>
            <param name="x">the x axis posiition</param>
            <param name="y">the y axis position</param>
            <param name="radius">the radius of the circle</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Circle.set(System.Drawing.Color,System.Int32[])">
            <summary>Sets the specified values for the circle</summary>
            <param name="colour">The colour.</param>
            <param name="list">The list of paramaters for the circle</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Circle.draw(System.Drawing.Graphics)">
            <summary>
            overrides draw method when Circle.Draw is called
            draws a circle on the graphics object
            </summary>
            <param name="g">the graphics object to be output</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Circle.drawfilled(System.Drawing.Graphics)">
            <summary>
            overrides drawfilled method to draw filled circles
            draws filled circles on the graphics object
            </summary>
            <param name="g">the graphics object to be output</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Circle.ToString">
            <summary>
            when ToString() called on circle, returns with radius appedned
            </summary>
            <returns>ToString()+radius</returns>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.ShapeFactory">
            <summary>
            factory class for producting shape objects
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.ShapeFactory.getShape(System.String)">
            <summary>
            Gets the shape.
            </summary>
            <param name="shapeType">Type of the shape.</param>
            <returns>the requested type of shape</returns>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Command">
            <summary>
            Commad class allows creation of commands
            commands are passed from parser classes to execute class to draw to shapes array
            </summary>
        </member>
        <member name="P:ProgrammingLanguageEnvironment.Command.Action">
            <summary>Gets or sets the action.</summary>
            <value>The requested action from Action Class</value>
        </member>
        <member name="P:ProgrammingLanguageEnvironment.Command.Paramaters">
            <summary>Gets or sets the paramaters for a given action</summary>
            <value>The paramaters input for the action</value>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Command.#ctor(ProgrammingLanguageEnvironment.Action,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Commands hold the action to be performed and the associated paramaters
            input is parsed into commands
            </summary>
            <param name="action">The action parsed from input</param>
            <param name="paramaters">The paramaters for the action</param>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Execute">
            <summary>
              <para>
            holds methods for executing actions and applying graphics objects to the form
            </para>
              <para>calls methods from Parser class on input to define commands to execute </para>
            </summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.programCounter">
            <summary>The program counter, counts numbers of lines in the program</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.factory">
            <summary>The factory, used to set and define shapes drawn by the program</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.shapes">
            <summary>Array to hold the list of shapes to be drawn</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.s">
            <summary>The current shape to be passed to the array</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.xDef">
            <summary>The x-axis default position</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.yDef">
            <summary>The y-axiis default position</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.colour">
            <summary>The current colour shapes are drawn using (default is black)</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.fill">
            <summary>Bool to allow selection of drawing shapes filled or unfilled</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.loopCounter">
            <summary>The loop counter, counts the number of iterations through the current loop</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.loopSize">
            <summary>The total number times to perform the loop</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.loopLength">
            <summary>The total number of lines within the loop</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.loopFlag">
            <summary>Flag to show if we are inside a loop or not</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.executeLinesFlag">
            <summary>Flag to show if lines are being skipped (for IF or Methods)</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.programLength">
            <summary>The number of lines in the input or "program"</summary>
        </member>
        <member name="P:ProgrammingLanguageEnvironment.Execute.feedback">
            <summary>Gets or sets the list of feedback added to as the program executes.</summary>
            <value>The feedback strings entered from Execute Class</value>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.variableNames">
            <summary>The array of set variable names</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.variableValues">
            <summary>The array of set variable values</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.variableCounter">
            <summary>The variable counter
            for numbers of vars set by the program</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.firstasint">
            <summary>The first integer found when processing IF statements</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.secondasint">
            <summary>The second integer found when processing IF statments</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.splitLine">
            <summary>Array for holding split elements of the input line being processed</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.loopParam">
            <summary>The number of times a loop is to be performed</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Execute.inputline">
            <summary>String for holding the current line of the program</summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Execute.ExecuteParse(System.String,System.Collections.ArrayList)">
            <summary>calls the parser methods on user input
            executes the input actions and paramaters to create shapes
            adds shapes to the shapes array</summary>
            <param name="inputtext">the user input</param>
            <param name="shapes">a list of shapes to be drawn onto</param>
            <returns>an array of shapes to be drawn<br /></returns>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.MainForm">
            <summary>Holds the main elements for the form</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.MainForm.OutputBitmap">
            <summary>The output bitmap</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.MainForm.shapes">
            <summary>The shapes
            to be drawn</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.MainForm.feedback">
            <summary>The array of feedback strings to be output</summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.#ctor">
            <summary>
            initalise the form
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.CommandLine_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            detects when the user presses return to submit command line data
            if thwere is data in the command line it is executed
            if run is entered the program window is executed
            iif clear is entered the values for the program are cleared
            </summary>
            <param name="sender">the command line</param>
            <param name="e">the keypressed event</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.button1_Click(System.Object,System.EventArgs)">
            <summary>
            event for clicking the run button
            </summary>
            <param name="sender">the run button</param>
            <param name="e">the click event</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.OutputWindow_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            gets values for the ouput window
            </summary>
            <param name="sender">the output paint window</param>
            <param name="e"></param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.button1_Click_1(System.Object,System.EventArgs)">
            <summary>
            clear button
            </summary>
            <param name="sender">the button</param>
            <param name="e">the click</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.button2_Click(System.Object,System.EventArgs)">
            <summary>
            save button
            </summary>
            <param name="sender">the button</param>
            <param name="e">the click</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.button3_Click(System.Object,System.EventArgs)">
            <summary>
            the load button
            </summary>
            <param name="sender">the button</param>
            <param name="e">the click</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.Form1_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the Form1 control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.pictureBox1_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the pictureBox1 control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.CommandLine_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the CommandLine control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.ProgramWindow_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the ProgramWindow control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.feedbackBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the feedbackBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Line">
            <summary>
            class to draw lines 
            line method called from DrawTo
            </summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Line.tox">
            <summary>The destination value of the x/y axis</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Line.toy">
            <summary>The destination value of the x/y axis</summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProgrammingLanguageEnvironment.Line"/> class.
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Line.#ctor(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructor for lines
            </summary>
            <param name="colour">the colour of the line</param>
            <param name="x">starting x axis position</param>
            <param name="y">starting y axis position</param>
            <param name="tox">ending x axis position</param>
            <param name="toy">ending y axis position</param>
            
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Line.set(System.Drawing.Color,System.Int32[])">
            <summary>
            Sets the specified values of the line.
            </summary>
            <param name="colour">The colour.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Line.draw(System.Drawing.Graphics)">
            <summary>
            draws a line on the graphics object
            </summary>
            <param name="g">graphics object to be output</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Line.drawfilled(System.Drawing.Graphics)">
            <summary>
            method to call when fill is selected
            does not change the lines
            </summary>
            <param name="g">the graphics object to be output</param>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Parser">
            <summary>
            class to hold parser methods for processing user input
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Parser.ParseAction(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            parses string tokens and returns the first that matches to an Action in the ENUMS 
            </summary>
            <param name="tokens">the string tokens from input</param>
            <returns>an instance of the Action Enums if matched,Action.none if unmatched</returns>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Parser.ToTitleCase(System.String)">
            <summary>
            returns a string in TitleCase
            Culture info is used to check application 
            </summary>
            <param name="input">the string to be parsed</param>
            <returns>the input string in Title Case</returns>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Parser.ParseNumbers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            parses an input of strings into integers for use in shape paramaters
            </summary>
            <param name="tokens">the seperated strings of input</param>
            <returns>a list of integers from the input strings</returns>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Parser.ParseInput(System.String)">
            <summary>
            calls both parse methods on the user input
            parses and splits input
            removes whitespace
            </summary>
            <param name="input">a user input string</param>
            <returns>a command to performed with action and pramaters</returns>
            <exception cref="T:System.NotImplementedException">catched null inputs</exception>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Rectangle">
            <summary>
            Class for drawing rectangles (squares are draw as rectangles with matched paramaters)
            </summary>
            <seealso cref="T:ProgrammingLanguageEnvironment.Shape" />
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Rectangle.width">
            <summary>
            The width and height variables for rectangles
            </summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Rectangle.height">
            <summary>
            The width and height variables for rectangles
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Rectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProgrammingLanguageEnvironment.Rectangle"/> class.
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Rectangle.#ctor(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ProgrammingLanguageEnvironment.Rectangle"/> class.
            </summary>
            <param name="colour">The colour.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Rectangle.set(System.Drawing.Color,System.Int32[])">
            <summary>
            Sets the specified variables of the shape.
            </summary>
            <param name="colour">The colour.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Rectangle.draw(System.Drawing.Graphics)">
            <summary>
            method for adding shapes to a graphics object
            </summary>
            <param name="g">the stored graphics to be output</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Rectangle.drawfilled(System.Drawing.Graphics)">
            <summary>
            method for adding filled shapes to a graphics object
            </summary>
            <param name="g">the filled shapes to be graphics object</param>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Shape">
            <summary>Abstract class to establish paramaters for shapes</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Shape.colour">
            <summary>The colour
            of the shape to be drawn</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Shape.x">
            <summary>
            The values to be used to draw the shape
            </summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Shape.y">
            <summary>
            The values to be used to draw the shape
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Shape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProgrammingLanguageEnvironment.Shape"/> class.
            </summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Shape.#ctor(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            shape method to set the values of a shape
            </summary>
            <param name="colour">the colour of the shape</param>
            <param name="x">the x axis position to be drawn from</param>
            <param name="y">the y axis position to be drawn from</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Shape.set(System.Drawing.Color,System.Int32[])">
            <summary>
            Sets the specified values for the shape.
            </summary>
            <param name="colour">The colour.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Shape.draw(System.Drawing.Graphics)">
            <summary>
            method for adding shapes to a graphics object
            </summary>
            <param name="g">the stored graphics to be output</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Shape.drawfilled(System.Drawing.Graphics)">
            <summary>
            method for adding filled shapes to a graphics object
            </summary>
            <param name="g">the filled shapes to be graphics object</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Shape.ToString">
            <summary>
            overrides ToString method to return the paramaters for a shape
            </summary>
            <returns>the string requested + the coordinated and colour</returns>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Triangle">
            <summary>Class to draw Triangles</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Triangle.side1">
            <summary>The paramaters of the triangles 3 sides</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Triangle.side2">
            <summary>The paramaters of the triangles 3 sides</summary>
        </member>
        <member name="F:ProgrammingLanguageEnvironment.Triangle.side3">
            <summary>The paramaters of the triangles 3 sides</summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Triangle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ProgrammingLanguageEnvironment.Triangle" /> class.</summary>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Triangle.set(System.Drawing.Color,System.Int32[])">
            <summary>Sets the values of a triangle.</summary>
            <param name="colour">The colour.</param>
            <param name="list">The list of paramaters to be used to draw a triangle</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Triangle.#ctor(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construtor for triangles
            </summary>
            <param name="colour">the colour of the triangle</param>
            <param name="x">its x axis position</param>
            <param name="y">its y asix position</param>
            <param name="side1">the value for side 1</param>
            <param name="side2">the value for side 2</param>
            <param name="side3">the value for side 3</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Triangle.draw(System.Drawing.Graphics)">
            <summary>
            draws an empty triangle
            </summary>
            <param name="g">the graphics object to be output</param>
        </member>
        <member name="M:ProgrammingLanguageEnvironment.Triangle.drawfilled(System.Drawing.Graphics)">
            <summary>
            draws a filled triangle
            </summary>
            <param name="g">the graphics object to be output</param>
        </member>
        <member name="T:ProgrammingLanguageEnvironment.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ProgrammingLanguageEnvironment.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ProgrammingLanguageEnvironment.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
